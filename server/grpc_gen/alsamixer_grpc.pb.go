// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AlsamixerClient is the client API for Alsamixer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlsamixerClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (Alsamixer_CommunicateClient, error)
}

type alsamixerClient struct {
	cc grpc.ClientConnInterface
}

func NewAlsamixerClient(cc grpc.ClientConnInterface) AlsamixerClient {
	return &alsamixerClient{cc}
}

var alsamixerCommunicateStreamDesc = &grpc.StreamDesc{
	StreamName:    "Communicate",
	ServerStreams: true,
	ClientStreams: true,
}

func (c *alsamixerClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (Alsamixer_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, alsamixerCommunicateStreamDesc, "/alsa.Alsamixer/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &alsamixerCommunicateClient{stream}
	return x, nil
}

type Alsamixer_CommunicateClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type alsamixerCommunicateClient struct {
	grpc.ClientStream
}

func (x *alsamixerCommunicateClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *alsamixerCommunicateClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlsamixerService is the service API for Alsamixer service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAlsamixerService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type AlsamixerService struct {
	Communicate func(Alsamixer_CommunicateServer) error
}

func (s *AlsamixerService) communicate(_ interface{}, stream grpc.ServerStream) error {
	return s.Communicate(&alsamixerCommunicateServer{stream})
}

type Alsamixer_CommunicateServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type alsamixerCommunicateServer struct {
	grpc.ServerStream
}

func (x *alsamixerCommunicateServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *alsamixerCommunicateServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterAlsamixerService registers a service implementation with a gRPC server.
func RegisterAlsamixerService(s grpc.ServiceRegistrar, srv *AlsamixerService) {
	srvCopy := *srv
	if srvCopy.Communicate == nil {
		srvCopy.Communicate = func(Alsamixer_CommunicateServer) error {
			return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "alsa.Alsamixer",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Communicate",
				Handler:       srvCopy.communicate,
				ServerStreams: true,
				ClientStreams: true,
			},
		},
		Metadata: "alsamixer.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewAlsamixerService creates a new AlsamixerService containing the
// implemented methods of the Alsamixer service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewAlsamixerService(s interface{}) *AlsamixerService {
	ns := &AlsamixerService{}
	if h, ok := s.(interface {
		Communicate(Alsamixer_CommunicateServer) error
	}); ok {
		ns.Communicate = h.Communicate
	}
	return ns
}

// UnstableAlsamixerService is the service API for Alsamixer service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableAlsamixerService interface {
	Communicate(Alsamixer_CommunicateServer) error
}
